const { v4: uuidv4 } = require('uuid');
const aiService = require('../services/aiService');

// Í∞ÑÎã®Ìïú Î©îÎ™®Î¶¨ Ï†ÄÏû•ÏÜå (ÎÇòÏ§ëÏóê RedisÎÇò DBÎ°ú ÍµêÏ≤¥)
const activeRooms = new Map();
const userSessions = new Map();

function handleChatEvents(io, socket) {
  console.log('üîó ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïó∞Í≤∞:', socket.id);
  
  // Ï±ÑÌåÖÎ∞© ÏûÖÏû•
  socket.on('join-room', (data) => {
    try {
      const { roomId, username } = data;
      
      // Ïù¥Ï†Ñ Î∞©ÏóêÏÑú ÎÇòÍ∞ÄÍ∏∞
      const previousRoom = userSessions.get(socket.id);
      if (previousRoom) {
        socket.leave(previousRoom.roomId);
        updateRoomUsers(io, previousRoom.roomId, socket.id, 'leave');
      }
      
      // ÏÉà Î∞© ÏûÖÏû•
      socket.join(roomId);
      userSessions.set(socket.id, { roomId, username, joinedAt: new Date() });
      
      // Î∞© Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
      updateRoomUsers(io, roomId, socket.id, 'join', username);
      
      console.log(`üë§ ${username}(${socket.id})Í∞Ä Î∞© ${roomId}Ïóê ÏûÖÏû•`);
      
      // ÏûÖÏû• ÌôïÏù∏ Î©îÏãúÏßÄ Ï†ÑÏÜ°
      socket.emit('room-joined', {
        success: true,
        roomId,
        message: `${roomId} Î∞©Ïóê ÏûÖÏû•ÌñàÏäµÎãàÎã§.`,
        timestamp: new Date()
      });
      
      // Îã§Î•∏ ÏÇ¨Ïö©ÏûêÎì§ÏóêÍ≤å ÏûÖÏû• ÏïåÎ¶º
      socket.to(roomId).emit('user-joined', {
        username,
        message: `${username}ÎãòÏù¥ ÏûÖÏû•ÌñàÏäµÎãàÎã§.`,
        timestamp: new Date()
      });
      
    } catch (error) {
      console.error('Î∞© ÏûÖÏû• Ïò§Î•ò:', error);
      socket.emit('error', { message: 'Î∞© ÏûÖÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
    }
  });
  
  // Î©îÏãúÏßÄ Ï†ÑÏÜ°
  socket.on('send-message', async (data) => {
    try {
      const { roomId, message, sender, messageType = 'text' } = data;
      const userSession = userSessions.get(socket.id);
      
      if (!userSession || userSession.roomId !== roomId) {
        socket.emit('error', { message: 'Î®ºÏ†Ä Ï±ÑÌåÖÎ∞©Ïóê ÏûÖÏû•Ìï¥Ï£ºÏÑ∏Ïöî.' });
        return;
      }
      
      // Î©îÏãúÏßÄ Í∞ùÏ≤¥ ÏÉùÏÑ±
      const messageObj = {
        id: uuidv4(),
        message: message.trim(),
        sender: sender || userSession.username,
        messageType, // text, emoji, image Îì±
        timestamp: new Date(),
        roomId
      };
      
      // ÏûÖÎ†• Í≤ÄÏ¶ù
      if (!messageObj.message || messageObj.message.length > 1000) {
        socket.emit('error', { message: 'Î©îÏãúÏßÄÎäî 1-1000Ïûê ÏÇ¨Ïù¥Ïó¨Ïïº Ìï©ÎãàÎã§.' });
        return;
      }
      
      console.log(`üí¨ [${roomId}] ${messageObj.sender}: ${messageObj.message}`);
      
      // Í∞ôÏùÄ Î∞©Ïùò Î™®Îì† ÏÇ¨Ïö©ÏûêÏóêÍ≤å Î©îÏãúÏßÄ Ï†ÑÏÜ°
      io.to(roomId).emit('receive-message', messageObj);
      
      // AI Î∂ÑÏÑù ÏöîÏ≤≠ (ÎπÑÎèôÍ∏∞)
      setTimeout(async () => {
        await requestAnalysis(io, roomId, messageObj, messages.get(roomId) || []);
      }, 500);
      
    } catch (error) {
      console.error('Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïò§Î•ò:', error);
      socket.emit('error', { message: 'Î©îÏãúÏßÄ Ï†ÑÏÜ° Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' });
    }
  });
  
  // ÌÉÄÏù¥Ìïë ÏÉÅÌÉú ÏïåÎ¶º
  socket.on('typing-start', (data) => {
    const { roomId } = data;
    const userSession = userSessions.get(socket.id);
    
    if (userSession && userSession.roomId === roomId) {
      socket.to(roomId).emit('user-typing', {
        username: userSession.username,
        isTyping: true
      });
    }
  });
  
  socket.on('typing-stop', (data) => {
    const { roomId } = data;
    const userSession = userSessions.get(socket.id);
    
    if (userSession && userSession.roomId === roomId) {
      socket.to(roomId).emit('user-typing', {
        username: userSession.username,
        isTyping: false
      });
    }
  });
  
  // Î©îÏãúÏßÄ ÏùΩÏùå Ï≤òÎ¶¨
  socket.on('mark-read', (data) => {
    const { roomId, messageId } = data;
    const userSession = userSessions.get(socket.id);
    
    if (userSession && userSession.roomId === roomId) {
      socket.to(roomId).emit('message-read', {
        messageId,
        readBy: userSession.username,
        timestamp: new Date()
      });
    }
  });
  
  // Ïó∞Í≤∞ Ìï¥Ï†ú
  socket.on('disconnect', (reason) => {
    try {
      const userSession = userSessions.get(socket.id);
      
      if (userSession) {
        const { roomId, username } = userSession;
        
        // Î∞©ÏóêÏÑú ÎÇòÍ∞ÄÍ∏∞
        updateRoomUsers(io, roomId, socket.id, 'leave');
        
        // Îã§Î•∏ ÏÇ¨Ïö©ÏûêÎì§ÏóêÍ≤å Ìá¥Ïû• ÏïåÎ¶º
        socket.to(roomId).emit('user-left', {
          username,
          message: `${username}ÎãòÏù¥ Ìá¥Ïû•ÌñàÏäµÎãàÎã§.`,
          timestamp: new Date()
        });
        
        console.log(`üëã ${username}(${socket.id}) Ïó∞Í≤∞ Ìï¥Ï†ú: ${reason}`);
      }
      
      // ÏÑ∏ÏÖò Ï†ïÎ¶¨
      userSessions.delete(socket.id);
      
    } catch (error) {
      console.error('Ïó∞Í≤∞ Ìï¥Ï†ú Ï≤òÎ¶¨ Ïò§Î•ò:', error);
    }
  });
}

// Î∞© ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
function updateRoomUsers(io, roomId, socketId, action, username = null) {
  try {
    if (!activeRooms.has(roomId)) {
      activeRooms.set(roomId, {
        users: new Map(),
        createdAt: new Date()
      });
    }
    
    const room = activeRooms.get(roomId);
    
    if (action === 'join' && username) {
      room.users.set(socketId, {
        username,
        joinedAt: new Date(),
        lastActivity: new Date()
      });
    } else if (action === 'leave') {
      room.users.delete(socketId);
    }
    
    // ÌòÑÏû¨ Ï†ëÏÜçÏûê Ïàò Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏
    const userCount = room.users.size;
    const userList = Array.from(room.users.values()).map(user => user.username);
    
    io.to(roomId).emit('room-info', {
      roomId,
      userCount,
      users: userList,
      timestamp: new Date()
    });
    
    // Îπà Î∞© Ï†ïÎ¶¨
    if (userCount === 0) {
      activeRooms.delete(roomId);
      console.log(`üóëÔ∏è Îπà Î∞© ÏÇ≠Ï†ú: ${roomId}`);
    }
    
  } catch (error) {
    console.error('Î∞© ÏÇ¨Ïö©Ïûê ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò:', error);
  }
}

// AI Î∂ÑÏÑù ÏöîÏ≤≠
async function requestAnalysis(io, roomId, messageObj, messages) {
  try {
    const analysisResult = await aiService.analyzeConversation(messages, messageObj);
    
    io.to(roomId).emit('analysis-result', analysisResult);
    
  } catch (error) {
    console.error('Î∂ÑÏÑù ÏöîÏ≤≠ Ïò§Î•ò:', error);
    
    // Ïã§Ìå®Ïãú Í∏∞Î≥∏ Î∂ÑÏÑù Ï†ÑÏÜ°
    io.to(roomId).emit('analysis-result', {
      messageId: messageObj.id,
      suggestions: generateQuickSuggestions(messageObj.message),
      sentiment: { type: 'neutral', confidence: 0.5 },
      interestLevel: { score: 5.0, level: 'MEDIUM' },
      error: 'Î∂ÑÏÑù ÏÑúÎπÑÏä§ Ïò§Î•ò'
    });
  }
}

// Îπ†Î•∏ ÎãµÎ≥Ä Ï∂îÏ≤ú ÏÉùÏÑ±
function generateQuickSuggestions(message) {
  const lowerMsg = message.toLowerCase();
  
  if (lowerMsg.includes('ÏïàÎÖï') || lowerMsg.includes('hi') || lowerMsg.includes('hello')) {
    return ['ÏïàÎÖïÌïòÏÑ∏Ïöî! üòä', 'Î∞òÍ∞ÄÏõåÏöî!', 'Ï¢ãÏùÄ ÌïòÎ£® Î≥¥ÎÇ¥ÏÑ∏Ïöî!'];
  }
  
  if (lowerMsg.includes('Í≥†ÎßàÏõå') || lowerMsg.includes('Í∞êÏÇ¨')) {
    return ['Ï≤úÎßåÏóêÏöî!', 'Î≥ÑÎßêÏîÄÏùÑÏöî üòä', 'ÎèÑÏõÄÏù¥ ÎêòÏñ¥ÏÑú Í∏∞ÎªêÏöî!'];
  }
  
  if (lowerMsg.includes('ÌûòÎì§') || lowerMsg.includes('ÌîºÍ≥§')) {
    return ['ÎßéÏù¥ ÌûòÎìúÏãúÍ≤†Ïñ¥Ïöî üòî', 'Ìëπ Ïâ¨ÏÑ∏Ïöî!', 'Î¨¥Î¶¨ÌïòÏßÄ ÎßàÏÑ∏Ïöî'];
  }
  
  if (lowerMsg.includes('Ï¢ã') || lowerMsg.includes('ÌñâÎ≥µ') || lowerMsg.includes('üòä')) {
    return ['Ï†ïÎßê Ï¢ãÏúºÏãúÍ≤†Ïñ¥Ïöî! üòä', 'Ï†ÄÎèÑ Í∏∞Î∂Ñ Ï¢ãÏïÑÏ†∏Ïöî!', 'Ï∂ïÌïòÌï¥Ïöî! üéâ'];
  }
  
  return [
    'Ïû¨ÎØ∏ÏûàÎÑ§Ïöî! üòÑ',
    'Í∑∏ÎûòÏÑú Ïñ¥ÎñªÍ≤å ÎêòÏóàÎÇòÏöî?',
    'Îçî ÏûêÏÑ∏Ìûà ÏñòÍ∏∞Ìï¥Ï£ºÏÑ∏Ïöî!'
  ];
}

// Í∞ÑÎã®Ìïú Í∞êÏ†ï Î∂ÑÏÑù
function analyzeSentiment(message) {
  const positive = ['Ï¢ã', 'ÌñâÎ≥µ', 'ÏµúÍ≥†', 'ÏÇ¨Îûë', 'üòä', 'üòç', 'üëç', 'üéâ'];
  const negative = ['ÌûòÎì§', 'Ïã´', 'ÌôîÎÇò', 'Ïö∞Ïö∏', 'üò¢', 'üòî', 'üíî', 'üò°'];
  
  let score = 0;
  positive.forEach(word => {
    if (message.includes(word)) score += 1;
  });
  negative.forEach(word => {
    if (message.includes(word)) score -= 1;
  });
  
  if (score > 0) return { type: 'positive', score, confidence: 0.8 };
  if (score < 0) return { type: 'negative', score, confidence: 0.8 };
  return { type: 'neutral', score: 0, confidence: 0.6 };
}

// Í¥ÄÏã¨ÎèÑ Í≥ÑÏÇ∞
function calculateQuickInterest(message) {
  const length = message.length;
  const hasEmoji = /[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]/gu.test(message);
  const hasQuestion = message.includes('?');
  
  let interest = Math.min(length / 20, 5); // Í∏∏Ïù¥ Í∏∞Î∞ò
  if (hasEmoji) interest += 2;
  if (hasQuestion) interest += 1;
  
  return Math.min(Math.round(interest * 10) / 10, 10);
}

// Ï£ºÏ†ú Ï∂îÏ∂ú
function extractQuickTopics(message) {
  const topicKeywords = {
    'ÏùåÏãù': ['Î∞•', 'ÏùåÏãù', 'ÎßõÏûà', 'ÏöîÎ¶¨', 'Î†àÏä§ÌÜ†Îûë', 'Ïπ¥Ìéò'],
    'ÏùºÏÉÅ': ['Ïò§Îäò', 'Ïñ¥Ï†ú', 'ÎÇ¥Ïùº', 'ÌïòÎ£®', 'ÏãúÍ∞Ñ'],
    'Í∞êÏ†ï': ['Í∏∞Î∂Ñ', 'ÎäêÎÇå', 'ÏÉùÍ∞Å', 'ÎßàÏùå'],
    'Ï∑®ÎØ∏': ['ÏòÅÌôî', 'ÏùåÏïÖ', 'Í≤åÏûÑ', 'Ïö¥Îèô', 'Ï±Ö'],
    'Ïùº': ['ÌöåÏÇ¨', 'ÏóÖÎ¨¥', 'Ïùº', 'ÌöåÏùò', 'ÌîÑÎ°úÏ†ùÌä∏']
  };
  
  const foundTopics = [];
  for (const [topic, keywords] of Object.entries(topicKeywords)) {
    if (keywords.some(keyword => message.includes(keyword))) {
      foundTopics.push(topic);
    }
  }
  
  return foundTopics.length > 0 ? foundTopics : ['ÏùºÎ∞ò'];
}

module.exports = { handleChatEvents };